buildscript {
	ext {
		springBootVersion = '2.4.4'
	}
	repositories {
		mavenCentral()
//		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id "io.franzbecker.gradle-lombok" version "3.0.0"
	id 'idea'
//	id 'jacoco'
}

group = 'ShallWe'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
//	jcenter()
}

dependencies {
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
	compile (group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '2.1.1')
	compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.61'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'com.querydsl:querydsl-jpa'
	runtimeOnly 'com.h2database:h2'
	compile("org.mariadb.jdbc:mariadb-java-client")

	compileOnly 'org.projectlombok:lombok'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.6.3'
	annotationProcessor 'org.projectlombok:lombok'
//	testImplementation 'org.springframework.security:spring-security-test'
	implementation('org.springframework.boot:spring-boot-starter-validation')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
//	compile('org.modelmapper:modelmapper:0.7.8')
	testCompile('org.junit.jupiter:junit-jupiter-api')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
}

test {
//	jacoco {
//		destinationFile = file("$buildDir/jacoco/jacoco.exec")
//	}
	useJUnitPlatform()
//	finalizedBy 'jacocoTestReport'
}


////jacoco 설정 시작
//jacoco {
//	// JaCoCo 버전
//	toolVersion = '0.8.5'
//
////  테스트결과 리포트를 저장할 경로 변경
////  default는 "${project.reporting.baseDir}/jacoco"
////  reportsDir = file("$buildDir/customJacocoReportDir")
//}
//jacocoTestReport {
//	reports {
//		// 원하는 리포트를 켜고 끌 수 있다.
//		html.enabled true
//		xml.enabled false
//		csv.enabled false
//
////      각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있다.
//      html.destination file("$buildDir/jacocoHtml")
////      xml.destination file("$buildDir/jacoco.xml")
//	}
//
//	finalizedBy 'jacocoTestCoverageVerification'
//}
//
//jacocoTestCoverageVerification {
//	violationRules {
////		rule {
////			// 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 한다.
////			limit {
////				// 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
////				// 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
////				minimum = 0.30
////			}
////		}
//
//		rule {
//			// 룰을 간단히 켜고 끌 수 있다.
//			enabled = true
//
//			// 룰을 체크할 단위는 클래스 단위
//			element = 'CLASS'
//
//			// 브랜치 커버리지를 최소한 90% 만족시켜야 한다.
//			limit {
//				counter = 'BRANCH'
//				value = 'COVEREDRATIO'
//				minimum = 0.90
//			}
//
//			// 라인 커버리지를 최소한 80% 만족시켜야 한다.
//			limit {
//				counter = 'LINE'
//				value = 'COVEREDRATIO'
//				minimum = 0.80
//			}
//
//			// 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한한다.
//			limit {
//				counter = 'LINE'
//				value = 'TOTALCOUNT'
//				maximum = 200
////              maximum = 8
//			}
//			// 커버리지 범위설정
//
//			element = 'PACKAGE'
//			includes = ['ShallWe.Refactoring.*']
//			// 커버리지 체크를 제외할 클래스들
//			excludes = [
////                    '*.test.*',
////                    '*.Kotlin*'
//			]
//		}
//	}
//}
//
//task testCoverage(type: Test) {
//	group 'verification'
//	description 'Runs the unit tests with coverage'
//
//	dependsOn(':test',
//			':jacocoTestReport',
//			':jacocoTestCoverageVerification')
//
//	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
//	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
//}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
